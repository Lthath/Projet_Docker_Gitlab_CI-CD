include:
  - template: Jobs/Code-Quality.gitlab-ci.yml

stages:
  - build
  - test
  - staging
  - scan
  - production

variables:
  DOCKER_IMAGE: node:current-alpine
  DOCKER_IMAGE_STAGING: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

before_script:
  - cd my-static-app-car
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker pull $DOCKER_IMAGE

build:
  stage: build
  script:
    - docker run --rm -v $CI_PROJECT_DIR/my-static-app-car:/app -w /app $DOCKER_IMAGE npm ci --quiet && npm cache clean --force
    - docker run --rm -v $CI_PROJECT_DIR/my-static-app-car:/app -w /app $DOCKER_IMAGE npm run build
    - sudo chmod 777 -R $PWD
    - mkdir -p $CI_PROJECT_DIR/public
    - mv dist $CI_PROJECT_DIR/public
  artifacts:
    paths:
      - public
    untracked: false
    when: on_success
    expire_in: "30 days"

owasp:
  image: owasp/zap2docker-live
  stage: scan
  allow_failure: true
  script:
    - echo "create a directory..."
    - mkdir /zap/wrk
    - echo "Execute the baseline scan..."
    - /zap/zap-baseline.py -t http://localhost:8080/ -g gen.conf -r testreport.html
  after_script:
    - echo "Copy report file to the artifact path..."
    - cp /zap/wrk/testreport.html .
  needs:
    - job: staging
  artifacts:
    when: always
    expire_in: 30 days
    paths:
      - testreport.html

handle_vulnerabilities:
  stage: scan
  script:
    - echo "Checking for vulnerabilities..."
    - |
      if grep -q "Number of Alerts: 0" testreport.html; then
        echo "No vulnerabilities found."
      else
        echo "Vulnerabilities found. Check the artifact testreport.html for details."
        exit 1
      fi
  needs:
    - job: owasp

staging:
  stage: staging
  script:
    - docker run -d -p 8080:80 --name app-car-staging $DOCKER_IMAGE_STAGING
    - echo "Staging server is running --> http://localhost:8080"
  environment:
    name: staging
    url: http://localhost:8080
  dependencies:
    - build
  when: on_success

pages:
  stage: production
  script:
    - echo "Deploying to production...."
  artifacts:
    paths:
      - public
  environment:
    name: production
  dependencies:
    - build
    - handle_vulnerabilities
  only:
    - main
  when: on_success
